package pacman;

import org.json.JSONArray;
import org.json.JSONObject;

import gamsua.Client;
import gamsua.Server;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class PacMan implements Runnable {
    private final Server server;
    private static Client client;
    private final Thread thread = new Thread(this);
    private int key;
    private int currentKey;

    // Game
    private final int[][] map;
    private int[][] dots;
    private boolean lose;
    private int[][] dotMatrix;
    private int dotAmount;
    private int ghostInCage;

    private int[] currentPos;
    private int[] lastPos;
    private int code;   // code: 0 = NONE, 1 = UP, 2 = RIGHT, 3 = DOWN, 4 = LEFT
    private boolean open;
    private boolean power;  // If true, can eat ghosts
    private int powerCont;


    // Constructor
    public PacMan() throws IOException {
        server = new Server(935);
        client = new Client(420);

        // Game
        map = new int[][] {{0,0},{1,0},{2,0},{3,0},{4,0},{5,0},{6,0},{7,0},{8,0},{9,0},{10,0},{11,0},{12,0},{13,0},{14,0},{15,0},{16,0},{17,0},{18,0},{19,0},{20,0},{21,0},{22,0},{23,0},{24,0},{25,0},{26,0},{27,0},{28,0},{29,0},{30,0},{31,0},{32,0},{33,0},{34,0},{35,0},{36,0},{37,0},{38,0},{39,0},{40,0},{41,0},{42,0},{43,0},{44,0},{45,0},{46,0},{47,0},{48,0},{49,0},
                {0,1},{24,1},{25,1},{49,1},
                {0,2},{24,2},{25,2},{49,2},
                {0,3},{24,3},{25,3},{49,3},
                {0,4},{24,4},{25,4},{49,4},
                {0,5},{5,5},{6,5},{7,5},{8,5},{13,5},{14,5},{15,5},{16,5},{17,5},{18,5},{19,5},{24,5},{25,5},{30,5},{31,5},{32,5},{33,5},{34,5},{35,5},{36,5},{41,5},{42,5},{43,5},{44,5},{49,5},
                {0,6},{5,6},{6,6},{7,6},{8,6},{13,6},{14,6},{15,6},{16,6},{17,6},{18,6},{19,6},{24,6},{25,6},{30,6},{31,6},{32,6},{33,6},{34,6},{35,6},{36,6},{41,6},{42,6},{43,6},{44,6},{49,6},
                {0,7},{5,7},{6,7},{7,7},{8,7},{13,7},{14,7},{15,7},{16,7},{17,7},{18,7},{19,7},{24,7},{25,7},{30,7},{31,7},{32,7},{33,7},{34,7},{35,7},{36,7},{41,7},{42,7},{43,7},{44,7},{49,7},
                {0,8},{49,8},
                {0,9},{49,9},
                {0,10},{49,10},
                {0,11},{49,11},
                {0,12},{5,12},{6,12},{7,12},{8,12},{13,12},{14,12},{19,12},{20,12},{21,12},{22,12},{23,12},{24,12},{25,12},{26,12},{27,12},{28,12},{29,12},{30,12},{35,12},{36,12},{41,12},{42,12},{43,12},{44,12},{49,12},
                {0,13},{13,13},{14,13},{24,13},{25,13},{35,13},{36,13},{49,13},
                {0,14},{13,14},{14,14},{24,14},{25,14},{35,14},{36,14},{49,14},
                {0,15},{13,15},{14,15},{24,15},{25,15},{35,15},{36,15},{49,15},
                {0,16},{13,16},{14,16},{24,16},{25,16},{35,16},{36,16},{49,16},
                {0,17},{1,17},{2,17},{3,17},{4,17},{5,17},{6,17},{7,17},{8,17},{13,17},{14,17},{15,17},{16,17},{17,17},{18,17},{19,17},{24,17},{25,17},{30,17},{31,17},{32,17},{33,17},{34,17},{35,17},{36,17},{41,17},{42,17},{43,17},{44,17},{45,17},{46,17},{47,17},{48,17},{49,17},
                {8,18},{13,18},{14,18},{35,18},{36,18},{41,18},
                {8,19},{13,19},{14,19},{35,19},{36,19},{41,19},
                {8,20},{13,20},{14,20},{35,20},{36,20},{41,20},
                {8,21},{13,21},{14,21},{35,21},{36,21},{41,21},
                {0,22},{1,22},{2,22},{3,22},{4,22},{5,22},{6,22},{7,22},{8,22},{13,22},{14,22},{19,22},{20,22},{21,22},{22,22},{23,22},{24,22},{25,22},{26,22},{27,22},{28,22},{29,22},{30,22},{35,22},{36,22},{41,22},{42,22},{43,22},{44,22},{45,22},{46,22},{47,22},{48,22},{49,22},
                {19,23},{30,23},
                {19,24},{30,24},
                {19,25},{30,25},
                {19,26},{30,26},
                {0,27},{1,27},{2,27},{3,27},{4,27},{5,27},{6,27},{7,27},{8,27},{13,27},{14,27},{19,27},{20,27},{21,27},{22,27},{23,27},{24,27},{25,27},{26,27},{27,27},{28,27},{29,27},{30,27},{35,27},{36,27},{41,27},{42,27},{43,27},{44,27},{45,27},{46,27},{47,27},{48,27},{49,27},
                {8,28},{13,28},{14,28},{35,28},{36,28},{41,28},
                {8,29},{13,29},{14,29},{35,29},{36,29},{41,29},
                {8,30},{13,30},{14,30},{35,30},{36,30},{41,30},
                {8,31},{13,31},{14,31},{35,31},{36,31},{41,31},
                {0,32},{1,32},{2,32},{3,32},{4,32},{5,32},{6,32},{7,32},{8,32},{13,32},{14,32},{19,32},{20,32},{21,32},{22,32},{23,32},{24,32},{25,32},{26,32},{27,32},{28,32},{29,32},{30,32},{35,32},{36,32},{41,32},{42,32},{43,32},{44,32},{45,32},{46,32},{47,32},{48,32},{49,32},
                {0,33},{49,33},
                {0,34},{49,34},
                {0,35},{49,35},
                {0,36},{49,36},
                {0,37},{5,37},{6,37},{7,37},{8,37},{13,37},{14,37},{19,37},{20,37},{21,37},{22,37},{23,37},{24,37},{25,37},{26,37},{27,37},{28,37},{29,37},{30,37},{35,37},{36,37},{41,37},{42,37},{43,37},{44,37},{49,37},
                {0,38},{5,38},{6,38},{7,38},{8,38},{13,38},{14,38},{19,38},{20,38},{21,38},{22,38},{23,38},{24,38},{25,38},{26,38},{27,38},{28,38},{29,38},{30,38},{35,38},{36,38},{41,38},{42,38},{43,38},{44,38},{49,38},
                {0,39},{5,39},{6,39},{7,39},{8,39},{13,39},{14,39},{19,39},{20,39},{21,39},{22,39},{23,39},{24,39},{25,39},{26,39},{27,39},{28,39},{29,39},{30,39},{35,39},{36,39},{41,39},{42,39},{43,39},{44,39},{49,39},
                {0,40},{13,40},{14,40},{24,40},{25,40},{35,40},{36,40},{49,40},
                {0,41},{13,41},{14,41},{24,41},{25,41},{35,41},{36,41},{49,41},
                {0,42},{13,42},{14,42},{24,42},{25,42},{35,42},{36,42},{49,42},
                {0,43},{13,43},{14,43},{24,43},{25,43},{35,43},{36,43},{49,43},
                {0,44},{5,44},{6,44},{7,44},{8,44},{9,44},{10,44},{11,44},{12,44},{13,44},{14,44},{15,44},{16,44},{17,44},{18,44},{19,44},{24,44},{25,44},{30,44},{31,44},{32,44},{33,44},{34,44},{35,44},{36,44},{37,44},{38,44},{39,44},{40,44},{41,44},{42,44},{43,44},{44,44},{49,44},
                {0,45},{49,45},
                {0,46},{49,46},
                {0,47},{49,47},
                {0,48},{49,48},
                {0,49},{1,49},{2,49},{3,49},{4,49},{5,49},{6,49},{7,49},{8,49},{9,49},{10,49},{11,49},{12,49},{13,49},{14,49},{15,49},{16,49},{17,49},{18,49},{19,49},{20,49},{21,49},{22,49},{23,49},{24,49},{25,49},{26,49},{27,49},{28,49},{29,49},{30,49},{31,49},{32,49},{33,49},{34,49},{35,49},{36,49},{37,49},{38,49},{39,49},{40,49},{41,49},{42,49},{43,49},{44,49},{45,49},{46,49},{47,49},{48,49},{49,49}
        };

        dots = new int[][] {{5,2},{7,2},{9,2},{11,2},{13,2},{15,2},{17,2},{19,2},{21,2},{27,2},{29,2},{31,2},{33,2},{35,2},{37,2},{39,2},{41,2},{43,2},{45,2},
                {3,4},{11,4},{21,4},{27,4},{39,4},{47,4},
                {3,6},{11,6},{21,6},{27,6},{39,6},{47,6},
                {3,8},{11,8},{21,8},{27,8},{39,8},{47,8},
                {3,10},{5,10},{7,10},{9,10},{11,10},{13,10},{15,10},{17,10},{19,10},{21,10},{23,10},{25,10},{27,10},{29,10},{31,10},{33,10},{35,10},{37,10},{39,10},{41,10},{43,10},{45,10},{47,10},
                {3,12},{11,12},{17,12},{33,12},{39,12},{47,12},
                {3,14},{5,14},{7,14},{9,14},{11,14},{17,14},{19,14},{21,14},{27,14},{29,14},{31,14},{33,14},{39,14},{41,14},{43,14},{45,14},{47,14},
                {11,16},{39,16},
                {11,18},{39,18},
                {11,20},{39,20},
                {11,22},{39,22},
                {11,24},{39,24},
                {11,26},{39,26},
                {11,28},{39,28},
                {11,30},{39,30},
                {11,32},{39,32},
                {3,34},{5,34},{7,34},{9,34},{11,34},{13,34},{15,34},{17,34},{19,34},{21,34},{23,34},{25,34},{27,34},{29,34},{31,34},{33,34},{35,34},{37,34},{39,34},{41,34},{43,34},{45,34},{47,34},
                {3,36},{11,36},{17,36},{33,36},{39,36},{47,36},
                {3,38},{11,38},{17,38},{33,38},{39,38},{47,38},
                {3,40},{11,40},{17,40},{33,40},{39,40},{47,40},
                {3,42},{5,42},{7,42},{9,42},{11,42},{17,42},{19,42},{21,42},{27,42},{29,42},{31,42},{33,42},{39,42},{41,42},{43,42},{45,42},{47,42},
                {3,44},{21,44},{27,44},{47,44},
                {5,46},{7,46},{9,46},{11,46},{13,46},{15,46},{17,46},{19,46},{21,46},{23,46},{25,46},{27,46},{29,46},{31,46},{33,46},{35,46},{37,46},{39,46},{41,46},{43,46},{45,46}
        };

        dotMatrix = new int[][] {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0},
                {0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0},
                {0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        };

        code = 0;
        open = false;
        lose = false;
        dotAmount = 0;
        power = false;
        ghostInCage = 2;
    }


    // JSON

    public int controllerJSON() throws IOException {
        server.receiveJSON();
        System.out.println(server.getReceived().toString());
        int key = server.getReceived().getInt("Key");
        System.out.println(key);
        return key;
    }

    public boolean validKey(int key){
        return switch (key) {
            case 'a', 's', 'd', 'w', ' ' -> true;
            default -> false;
        };
    }

    public void send(String color, int[][] coords) throws IOException {
        JSONObject Obj = new JSONObject();
        JSONArray array = new JSONArray();

        for (int[] c: coords)
            array.put(c);

        Obj.put(color,array);
        client.sendJSON(Obj);

        // this.send("Black",new int[][]{lastPos});
    }

    /*public void send2 (String color, int[] coords) throws IOException {
        JSONObject Obj = new JSONObject();
        JSONArray array = new JSONArray();
        array.put(coords);
        Obj.put(color,array);
        client.sendJSON(Obj);
    }*/ // SEND 2

    // Getters & Setters
    public static Client getClient() {
        return client;
    }
    public int[][] getDotMatrix() {
        return dotMatrix;
    }
    public int getGhostInCage() {
        return ghostInCage;
    }
    public int[] getCurrentPos() {
        return currentPos;
    }
    public boolean getPower() {return power;}
    public Server getServer() {
        return server;
    }

    public void setLose(boolean lose) {
        this.lose = lose;
    }

    // Game Methods

    // PACMAN

    public void cleanPacMan() throws IOException {  // And clean dots
        if (lastPos == null){
            return;
        }
        if (lastPos[1]+1 <= 49){
            this.send("Black",new int[][]{{lastPos[0],lastPos[1]+1},{lastPos[0]+1,lastPos[1]+1},{lastPos[0]+2,lastPos[1]+1},{lastPos[0]+3,lastPos[1]+1}});

            eatDots(new int[]{lastPos[0],lastPos[1]+1});
            eatDots(new int[]{lastPos[0]+1,lastPos[1]+1});
            eatDots(new int[]{lastPos[0]+2,lastPos[1]+1});
            eatDots(new int[]{lastPos[0]+3,lastPos[1]+1});
        }
        if (lastPos[1]+2 <= 49){
            this.send("Black",new int[][]{{lastPos[0]+1,lastPos[1]+2}});
            this.send("Black",new int[][]{{lastPos[0]+2,lastPos[1]+2}});

            eatDots(new int[]{lastPos[0]+1,lastPos[1]+2});
            eatDots(new int[]{lastPos[0]+2,lastPos[1]+2});
        }
        if (lastPos[1]-1 >= 0){
            this.send("Black",new int[][]{{lastPos[0]+1,lastPos[1]-1}});
            this.send("Black",new int[][]{{lastPos[0]+2,lastPos[1]-1}});

            eatDots(new int[]{lastPos[0]+1,lastPos[1]-1});
            eatDots(new int[]{lastPos[0]+2,lastPos[1]-1});
        }
        this.send("Black",new int[][]{lastPos});
        this.send("Black",new int[][]{{lastPos[0]+1,lastPos[1]}});
        this.send("Black",new int[][]{{lastPos[0]+2,lastPos[1]}});
        this.send("Black",new int[][]{{lastPos[0]+3,lastPos[1]}});

        eatDots(lastPos);
        eatDots(new int[]{lastPos[0]+1,lastPos[1]});
        eatDots(new int[]{lastPos[0]+2,lastPos[1]});
        eatDots(new int[]{lastPos[0]+3,lastPos[1]});
    }

    public void drawPacMan() throws IOException {   // Coords for top left square
        cleanPacMan();

        if (!open){
            if (currentPos[1]+1 <= 49){
                this.send("Yellow",new int[][]{{currentPos[0],currentPos[1]+1}});
                this.send("Yellow",new int[][]{{currentPos[0]+1,currentPos[1]+1}});
                this.send("Yellow",new int[][]{{currentPos[0]+2,currentPos[1]+1}});
                this.send("Yellow",new int[][]{{currentPos[0]+3,currentPos[1]+1}});
            }
            if (currentPos[1]+2 <= 49){
                this.send("Yellow",new int[][]{{currentPos[0]+1,currentPos[1]+2}});
                this.send("Yellow",new int[][]{{currentPos[0]+2,currentPos[1]+2}});
            }
            if (currentPos[1]-1 >= 0){
                this.send("Yellow",new int[][]{{currentPos[0]+1,currentPos[1]-1}});
                this.send("Yellow",new int[][]{{currentPos[0]+2,currentPos[1]-1}});
            }
            this.send("Yellow",new int[][]{currentPos});
            this.send("Yellow",new int[][]{{currentPos[0]+1,currentPos[1]}});
            this.send("Yellow",new int[][]{{currentPos[0]+2,currentPos[1]}});
            this.send("Yellow",new int[][]{{currentPos[0]+3,currentPos[1]}});
            return;
        }
        switch (code) {
            case 1 -> {
                if (currentPos[1] + 1 <= 49) {
                    this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1] + 1}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 3, currentPos[1] + 1}});
                }
                if (currentPos[1] + 2 <= 49) {
                    this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1] + 2}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1] + 2}});
                }
                if (currentPos[1] - 1 >= 0) {
                    this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1] - 1}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1] - 1}});
                }
                this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1]}});
                this.send("Yellow", new int[][]{{currentPos[0] + 3, currentPos[1]}});
            }
            case 2 -> {
                if (currentPos[1] + 1 <= 49) {
                    this.send("Yellow", new int[][]{{currentPos[0], currentPos[1] + 1}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 3, currentPos[1] + 1}});
                }
                if (currentPos[1] - 1 >= 0) {
                    this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1] - 1}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1] - 1}});
                }
                this.send("Yellow", new int[][]{currentPos});
                this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1]}});
                this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1]}});
                this.send("Yellow", new int[][]{{currentPos[0] + 3, currentPos[1]}});
            }
            case 3 -> {
                if (currentPos[1] + 1 <= 49) {
                    this.send("Yellow", new int[][]{{currentPos[0], currentPos[1] + 1}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1] + 1}});
                }
                if (currentPos[1] + 2 <= 49) {
                    this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1] + 2}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1] + 2}});
                }
                if (currentPos[1] - 1 >= 0) {
                    this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1] - 1}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1] - 1}});
                }
                this.send("Yellow", new int[][]{currentPos});
                this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1]}});
            }
            case 4 -> {
                if (currentPos[1] + 1 <= 49) {
                    this.send("Yellow", new int[][]{{currentPos[0], currentPos[1] + 1}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1] + 1}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1] + 1}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 3, currentPos[1] + 1}});
                }
                if (currentPos[1] + 2 <= 49) {
                    this.send("Yellow", new int[][]{{currentPos[0] + 1, currentPos[1] + 2}});
                    this.send("Yellow", new int[][]{{currentPos[0] + 2, currentPos[1] + 2}});
                }
                this.send("Yellow", new int[][]{currentPos});
                this.send("Yellow", new int[][]{{currentPos[0] + 3, currentPos[1]}});
            }
        }
    }

    public void movePlayer() throws IOException {
        switch (code){
            case 0:
                lastPos = null;
                currentPos = new int[] {28,24};
                code = 4;
                break;
            case 1:
                lastPos = currentPos;
                currentPos = new int[] {currentPos[0]-1,currentPos[1]};
                break;
            case 2:
                if (currentPos[1]+1 > 49){
                    lastPos = currentPos;
                    currentPos = new int[] {currentPos[0],0};
                }else{
                    lastPos = currentPos;
                    currentPos = new int[] {currentPos[0],currentPos[1]+1};
                }
                break;
            case 3:
                lastPos = currentPos;
                currentPos = new int[] {currentPos[0]+1,currentPos[1]};
                break;
            case 4:
                if (currentPos[1]-1 < 0){
                    lastPos = currentPos;
                    currentPos = new int[] {currentPos[0],49};
                }else{
                    lastPos = currentPos;
                    currentPos = new int[] {currentPos[0],currentPos[1]-1};
                }
                break;
        }

        drawPacMan();

        open = !open;
    }

    public boolean canMove(int num) throws IOException {

        switch (num){
            case 1:
                if (isInMap(new int[] {currentPos[0]-1,currentPos[1]-1}) || isInMap(new int[] {currentPos[0]-1,currentPos[1]}) || isInMap(new int[] {currentPos[0]-1,currentPos[1]+1}) || isInMap(new int[] {currentPos[0]-1,currentPos[1]+2})){
                    return false;
                }
                break;
            case 2:
                if (isInMap(new int[] {currentPos[0],currentPos[1]+3}) || isInMap(new int[] {currentPos[0]+1,currentPos[1]+3}) || isInMap(new int[] {currentPos[0]+2,currentPos[1]+3}) || isInMap(new int[] {currentPos[0]+3,currentPos[1]+3})){
                    return false;
                }
                break;
            case 3:
                if (isInMap(new int[] {currentPos[0]+4,currentPos[1]-1}) || isInMap(new int[] {currentPos[0]+4,currentPos[1]}) || isInMap(new int[] {currentPos[0]+4,currentPos[1]+1}) || isInMap(new int[] {currentPos[0]+4,currentPos[1]+2})){
                    return false;
                }
                break;
            case 4:
                if (isInMap(new int[] {currentPos[0],currentPos[1]-2}) || isInMap(new int[] {currentPos[0]+1,currentPos[1]-2}) || isInMap(new int[] {currentPos[0]+2,currentPos[1]-2}) || isInMap(new int[] {currentPos[0]+3,currentPos[1]-2})){
                    return false;
                }
                break;
        }
        return true;
    }

    // MAP

    public void drawMap() throws IOException {
        for (int[] coords : map){
            this.send("Blue",new int[][]{{coords[1],coords[0]}});
        }
        // White ghost door
        this.send("White",new int[][]{{22,23}});
        this.send("White",new int[][]{{22,24}});
        this.send("White",new int[][]{{22,25}});
        this.send("White",new int[][]{{22,26}});
    }

    public void drawDots() throws IOException {
        for (int[] coords : dots){
            this.send("White",new int[][]{{coords[1],coords[0]}});
        }
        // SPECIAL DOTS +++
        this.send("Orange",new int[][]{{2,2}});
        this.send("Orange",new int[][]{{2,3}});
        this.send("Orange",new int[][]{{3,2}});
        this.send("Orange",new int[][]{{3,3}});

        this.send("Orange",new int[][]{{2,46}});
        this.send("Orange",new int[][]{{2,47}});
        this.send("Orange",new int[][]{{3,46}});
        this.send("Orange",new int[][]{{3,47}});

        this.send("Orange",new int[][]{{46,2}});
        this.send("Orange",new int[][]{{47,2}});
        this.send("Orange",new int[][]{{46,3}});
        this.send("Orange",new int[][]{{47,3}});

        this.send("Orange",new int[][]{{46,46}});
        this.send("Orange",new int[][]{{46,47}});
        this.send("Orange",new int[][]{{47,46}});
        this.send("Orange",new int[][]{{47,47}});
    }

    public boolean isInMap(int[] pos) {
        for (int[] coords : map){
            if (Arrays.equals(new int[]{coords[1],coords[0]},pos)){
                return true;
            }
        }
        return false;
    }

    public void checkCageGhosts(Ghost ghost1, Ghost ghost2){
        int res = 0;
        if (ghost1.getInCage()){
            res++;
        }
        if (ghost2.getInCage()){
            res++;
        }
        ghostInCage = res;
    }

    // DOTS

    public void initListDots(){
        for (int[] coords : dots){
            dotMatrix[coords[1]][coords[0]] = 1;
            dotAmount++;
        }


    }

    public void eatDots(int[] coords){
        if (dotMatrix[coords[0]][coords[1]] == 1){
            dotMatrix[coords[0]][coords[1]] = 0;
            dotAmount--;
        }
        if (dotMatrix[coords[0]][coords[1]] == 2){
            dotMatrix[coords[0]][coords[1]] = 0;
            power = true;
            powerCont = 60;
        }
    }

    public void updatePower(){
        if (powerCont == 0){
            power = false;
        }
        if (powerCont > 0){
            powerCont--;
        }
    }


    //Win & Lose Screens
    public void gameOver() throws IOException{
        int[][] gameText = new int[][]{
                {13,2},{13,3},{14,2},{14,3},{15,2},{15,3},{16,2},{16,3},{17,2},{17,3},{18,2},{18,3},{19,2},{19,3},{20,2},{20,3},
                {11,4},{11,5},{11,6},{11,7},{11,8},{11,9},{11,10},{12,4},{12,5},{12,6},{12,7},{12,8},{12,9},{12,10},
                {21,4},{21,5},{21,6},{21,7},{21,8},{21,9},{21,10},{21,11},{21,12},{22,4},{22,5},{22,6},{22,7},{22,8},{22,9},{22,10},{22,11},{22,12},
                {17,9},{17,10},{17,11},{17,12},{18,9},{18,10},{18,11},{18,12},{19,11},{19,12},{20,11},{20,12},

                {13,15},{13,16},{14,15},{14,16},{15,15},{15,16},{16,15},{16,16},{17,15},{17,16},{18,15},{18,16},{19,15},{19,16},{20,15},{20,16},{21,15},{21,16},{22,15},{22,16},
                {11,17},{11,18},{11,19},{11,20},{11,21},{11,22},{12,17},{12,18},{12,19},{12,20},{12,21},{12,22},
                {13,23},{13,24},{14,23},{14,24},{15,23},{15,24},{16,23},{16,24},{17,23},{17,24},{18,23},{18,24},{19,23},{19,24},{20,23},{20,24},{21,23},{21,24},{22,23},{22,24},
                {17,17},{17,18},{17,19},{17,20},{17,21},{17,22},{18,17},{18,18},{18,19},{18,20},{18,21},{18,22},

                {11,27},{11,28},{11,29},{11,30},{11,33},{11,34},{12,27},{12,28},{12,29},{12,30},{12,33},{12,34},
                {13,27},{13,28},{14,27},{14,28},{15,27},{15,28},{16,27},{16,28},{17,27},{17,28},{18,27},{18,28},{19,27},{19,28},{20,27},{20,28},{21,27},{21,28},{22,27},{22,28},
                {13,31},{13,32},{14,31},{14,32},{15,31},{15,32},{16,31},{16,32},{17,31},{17,32},{18,31},{18,32},{19,31},{19,32},{20,31},{20,32},{21,31},{21,32},{22,31},{22,32},
                {13,35},{13,36},{14,35},{14,36},{15,35},{15,36},{16,35},{16,36},{17,35},{17,36},{18,35},{18,36},{19,35},{19,36},{20,35},{20,36},{21,35},{21,36},{22,35},{22,36},

                {11,41},{11,42},{11,43},{11,44},{11,45},{11,46},{12,41},{12,42},{12,43},{12,44},{12,45},{12,46},
                {13,39},{13,40},{14,39},{14,40},{15,39},{15,40},{16,39},{16,40},{17,39},{17,40},{18,39},{18,40},{19,39},{19,40},{20,39},{20,40},{21,39},{21,40},{22,39},{22,40},
                {16,41},{16,42},{16,43},{16,44},{17,41},{17,42},{17,43},{17,44},
                {21,41},{21,42},{21,43},{21,44},{21,45},{21,46},{22,41},{22,42},{22,43},{22,44},{22,45},{22,46}
        };

        int[][] overText = new int[][]{
                {29,2},{29,3},{30,2},{30,3},{31,2},{31,3},{32,2},{32,3},{33,2},{33,3},{34,2},{34,3},{35,2},{35,3},{36,2},{36,3},
                {29,10},{29,11},{30,10},{30,11},{31,10},{31,11},{32,10},{32,11},{33,10},{33,11},{34,10},{34,11},{35,10},{35,11},{36,10},{36,11},
                {27,4},{27,5},{27,6},{27,7},{27,8},{27,9},{28,4},{28,5},{28,6},{28,7},{28,8},{28,9},
                {37,4},{37,5},{37,6},{37,7},{37,8},{37,9},{38,4},{38,5},{38,6},{38,7},{38,8},{38,9},

                {27,14},{27,15},{28,14},{28,15},{29,14},{29,15},{30,14},{30,15},{31,14},{31,15},{32,14},{32,15},{33,14},{33,15},{34,14},{34,15},
                {27,22},{27,23},{28,22},{28,23},{29,22},{29,23},{30,22},{30,23},{31,22},{31,23},{32,22},{32,23},{33,22},{33,23},{34,22},{34,23},
                {35,16},{35,17},{36,16},{36,17},{35,20},{35,21},{36,20},{36,21},{37,18},{37,19},{38,18},{38,19},

                {27,28},{27,29},{27,30},{27,31},{27,32},{27,33},{28,28},{28,29},{28,30},{28,31},{28,32},{28,33},
                {29,26},{29,27},{30,26},{30,27},{31,26},{31,27},{32,26},{32,27},{33,26},{33,27},{34,26},{34,27},{35,26},{35,27},{36,26},{36,27},{37,26},{37,27},{38,26},{38,27},
                {32,28},{32,29},{32,30},{32,31},{33,28},{33,29},{33,30},{33,31},
                {37,28},{37,29},{37,30},{37,31},{37,32},{37,33},{38,28},{38,29},{38,30},{38,31},{38,32},{38,33},

                {27,36},{27,37},{27,38},{27,39},{27,40},{27,41},{28,36},{28,37},{28,38},{28,39},{28,40},{28,41},
                {33,36},{33,37},{33,38},{33,39},{33,40},{33,41},{34,36},{34,37},{34,38},{34,39},{34,40},{34,41},
                {29,36},{29,37},{30,36},{30,37},{31,36},{31,37},{32,36},{32,37},{35,36},{35,37},{36,36},{36,37},{37,36},{37,37},{38,36},{38,37},
                {29,42},{29,43},{30,42},{30,43},{31,42},{31,43},{32,42},{32,43},
                {35,42},{35,43},{36,42},{36,43},{37,42},{37,43},{38,42},{38,43}
        };

        send("Red",gameText);
        send("Gray",overText);

    }

    public void victoryScreen() throws IOException {
        int[][] youWinText = new int[][]{
                {14,13},{14,14},{15,13},{15,14},{16,13},{16,14},{17,13},{17,14},
                {14,17},{14,18},{15,17},{15,18},{16,17},{16,18},{17,17},{17,18},
                {18,15},{18,16},{19,15},{19,16},{20,15},{20,16},{21,15},{21,16},

                {14,23},{14,24},{15,23},{15,24},{20,23},{20,24},{21,23},{21,24},
                {16,21},{16,22},{17,21},{17,22},{18,21},{18,22},{19,21},{19,22},
                {16,25},{16,26},{17,25},{17,26},{18,25},{18,26},{19,25},{19,26},

                {14,29},{14,30},{15,29},{15,30},{16,29},{16,30},{17,29},{17,30},{18,29},{18,30},{19,29},{19,30},
                {14,33},{14,34},{15,33},{15,34},{16,33},{16,34},{17,33},{17,34},{18,33},{18,34},{19,33},{19,34},
                {20,31},{20,32},{21,31},{21,32},


                {26,9},{26,10},{27,9},{27,10},{28,9},{28,10},{29,9},{29,10},{30,9},{30,10},{31,9},{31,10},
                {26,17},{26,18},{27,17},{27,18},{28,17},{28,18},{29,17},{29,18},{30,17},{30,18},{31,17},{31,18},
                {32,11},{32,12},{33,11},{33,12},{32,15},{32,16},{33,15},{33,16},{30,13},{30,14},{31,13},{31,14},

                {26,21},{26,22},{26,23},{26,24},{26,25},{26,26},{27,21},{27,22},{27,23},{27,24},{27,25},{27,26},
                {32,21},{32,22},{32,23},{32,24},{32,25},{32,26},{33,21},{33,22},{33,23},{33,24},{33,25},{33,26},
                {28,23},{28,24},{29,23},{29,24},{30,23},{30,24},{31,23},{31,24},

                {26,29},{26,30},{26,31},{26,32},{26,33},{26,34},{27,29},{27,30},{27,31},{27,32},{27,33},{27,34},
                {28,29},{28,30},{29,29},{29,30},{30,29},{30,30},{31,29},{31,30},{32,29},{32,30},{33,29},{33,30},
                {28,35},{28,36},{29,35},{29,36},{30,35},{30,36},{31,35},{31,36},{32,35},{32,36},{33,35},{33,36},

                {26,39},{26,40},{27,39},{27,40},{28,39},{28,40},{29,39},{29,40},{30,39},{30,40},{32,39},{32,40},{33,39},{33,40}
        };

        send("Blue",youWinText);
    }


    @Override
    public void run() {
        try {
            while (server.getClient().isConnected()){
                key = controllerJSON();
            }
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }


    public static void main(String[] args) throws IOException, InterruptedException {
        PacMan main = new PacMan();
        Ghost redGhost = new Ghost(main,"Red");
        Ghost purpleGhost = new Ghost(main,"Purple");

        main.drawMap();
        main.drawDots();
        main.movePlayer();   // Initializes Player
        main.initListDots();

        main.thread.start();
        redGhost.start();
        purpleGhost.start();

        main.currentKey = 'a';
        main.key = 'a';

        while (main.server.getClient().isConnected()){
            Thread.sleep(100);
            if (main.canMove(main.code)){
                main.movePlayer();
            }

            if (main.validKey(main.key) && main.currentKey != main.key){
                main.currentKey = main.key;
            }

            // A button is pressed
            switch (main.currentKey) {
                case 'w' -> {
                    if (!main.canMove(1)){
                        break;
                    }

                    main.code = 1;
                }
                case 'a' -> {
                    if (!main.canMove(4)){
                        break;
                    }

                    main.code = 4;
                }
                case 's' -> {
                    if (!main.canMove(3)){
                        break;
                    }

                    main.code = 3;
                }
                case 'd' -> {
                    if (!main.canMove(2)){
                        break;
                    }

                    main.code = 2;
                }
            }

            if (main.dotAmount <= 0 ){    // WIN
                System.out.println("WIN");
                main.send("Clean",new int[][]{{0,0}});
                main.victoryScreen();

                while (main.server.getClient().isConnected()){
                    Thread.sleep(Integer.MAX_VALUE);
                }
            }

            if (main.lose){                 // LOSE
                main.send("Clean",new int[][]{{0,0}});
                main.gameOver();

                while (main.server.getClient().isConnected()){
                    Thread.sleep(Integer.MAX_VALUE);
                }
            }

            main.updatePower();

            main.checkCageGhosts(redGhost,purpleGhost);

            redGhost.finalSend();
            purpleGhost.finalSend();
            redGhost.cleanPacks();
            purpleGhost.cleanPacks();

            //To test the screen
            /*switch (main.key){
                case 'w'->main.send("Yellow",new int[]{0,0});
                case 'a'->main.send("Red",new int[]{1,1});
                case 's'->main.send("Green",new int[]{2,2});
                case 'd'->main.send("Purple",new int[]{3,3});
                case ' '->main.send("Blue",new int[]{4,4});
            }*/
        }

        main.server.close();
        main.client.close();
    }
}
